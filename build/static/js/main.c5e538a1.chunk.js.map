{"version":3,"sources":["actions/actions.ts","components/TodoItem.tsx","containers/TodoContainer.tsx","reducers/todoReducers.ts","reducers/index.ts","store/store.ts","index.tsx","App.tsx"],"names":["actionTypes","TodoItem","props","item","onClick","handleDelete","idx","TodoContainer","handleTextChange","e","setState","todoInput","target","value","handleButtonClick","addToDo","state","handleDeleteButtonClick","console","log","deleteToDo","todoJSX","this","todoList","length","map","key","onChange","placeholder","React","connect","store","count","todo","list","dispatch","type","ADD","payload","DELETE","initialState","rootReducer","combineReducers","action","oldList","splice","newList","createStore","ReactDOM","document","getElementById"],"mappings":"8KAGYA,E,4EAAAA,K,UAAAA,E,iBAAAA,M,KAKL,ICAMC,EAAoC,SAAAC,GAC/C,OACE,2BACE,4BACGA,EAAMC,KACP,0BAAQC,QAAS,kBAAMF,EAAMG,aAAaH,EAAMI,OAAhD,QCKFC,E,YAIJ,WAAYL,GAAa,IAAD,8BACtB,4CAAMA,KAMRM,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CACZC,UAAWF,EAAEG,OAAOC,SATA,EAaxBC,kBAAoB,WAClB,EAAKZ,MAAMa,QAAQ,EAAKC,MAAML,WAC9B,EAAKD,SAAS,CACZC,UAAW,MAhBS,EAoBxBM,wBAA0B,SAACX,GACzBY,QAAQC,IAAI,WAAYb,GACxB,EAAKJ,MAAMkB,WAAWd,IApBtB,EAAKU,MAAQ,CACXL,UAAW,IAHS,E,sEAyBd,IACJU,EADG,OAiBP,OAZEA,EAHGC,KAAKpB,MAAMqB,SAASC,OAGbF,KAAKpB,MAAMqB,SAASE,KAAI,SAACtB,EAAMG,GACvC,OACE,gBAAC,EAAD,CACEH,KAAMA,EACNuB,IAAKpB,EACLA,IAAKA,EACLD,aAAc,EAAKY,6BARf,qCAeV,2BACGI,EACD,yBACEM,SAAUL,KAAKd,iBACfoB,YAAa,iBACbf,MAAOS,KAAKN,MAAML,YAEpB,0BAAQP,QAASkB,KAAKR,mBAAtB,kB,GAtDoBe,aAyEbC,eAbS,SAACC,GACvB,MAAO,CACLC,MAAOD,EAAME,KAAKD,MAClBT,SAAUQ,EAAME,KAAKC,SAIE,SAACC,GAAD,MAA6C,CACtEpB,QAAS,SAACZ,GAAD,OAAkBgC,EAAS,CAAEC,KAAMpC,EAAYqC,IAAKC,QAASnC,KACtEiB,WAAY,SAACd,GAAD,OACV6B,EAAS,CAAEC,KAAMpC,EAAYuC,OAAQD,QAAShC,QAGnCwB,CAA6CvB,G,glBCnFrD,IAAMiC,EAA2B,CACtCR,MAAO,EACPE,KAAM,CAAC,iBAAkB,kBCHZO,EAJKC,YAAgB,CAClCT,KDSyB,WAAmE,IAAlEjB,EAAiE,uDAA7CwB,EAAcG,EAA+B,uCAC3F,OAAQA,EAAOP,MACb,KAAKpC,EAAYqC,IACf,OAAO,EAAP,GACKrB,EADL,CAEEgB,MAAOhB,EAAMgB,MAAQ,EACrBE,KAAK,GAAD,mBAAMlB,EAAMkB,MAAZ,CAAkBS,EAAOL,YAGjC,KAAKtC,EAAYuC,OACf,IAAMK,EAAO,YAAO5B,EAAMkB,MAC1BU,EAAQC,OAAOF,EAAOL,QAAS,GAC/B,IAAMQ,EAAUF,EAEhB,OAAO,EAAP,GACK5B,EADL,CAEEgB,MAAOhB,EAAMgB,MAAQ,EACrBE,KAAMY,IAGV,QACE,OAAO9B,ME7BEe,EAFDgB,YAAYN,GCI1BO,SACE,gBAAC,IAAD,CAAUjB,MAAOA,GACf,iBCN6B,WAC/B,OACE,gCACE,oDACA,gBAAC,EAAD,SDEF,OAEFkB,SAASC,eAAe,W","file":"static/js/main.c5e538a1.chunk.js","sourcesContent":["import { action } from \"typesafe-actions\";\n\n// use typescript enum rather than action constants\nexport enum actionTypes {\n  ADD = \"ADD\",\n  DELETE = \"DELETE\"\n}\n\nexport const todoActions = {\n  add: (item: string) => action(actionTypes.ADD, item),\n  delete: (idx: number) => action(actionTypes.DELETE, idx)\n};","import * as React from \"react\";\n\ninterface TodoItemProps {\n  item: string;\n  idx: number;\n  handleDelete: (idx: number) => void;\n}\n\nexport const TodoItem: React.FC<TodoItemProps> = props => {\n  return (\n    <div>\n      <span>\n        {props.item}\n        <button onClick={() => props.handleDelete(props.idx)}>X</button>\n      </span>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as MyTypes from \"MyTypes\";\nimport { actionTypes } from \"../actions\";\nimport { TodoItem } from \"../components\";\n\ninterface TodoContainerState {\n  todoInput: string;\n}\n\ninterface TodoContainerProps {\n  count: number;\n  todoList: string[];\n  addToDo: (item: string) => object;\n  deleteToDo: (idx: number) => object;\n}\n\nclass TodoContainer extends React.Component<\n  TodoContainerProps,\n  TodoContainerState\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      todoInput: \"\"\n    };\n  }\n\n  handleTextChange = (e: { target: { value: any } }) => {\n    this.setState({\n      todoInput: e.target.value\n    });\n  };\n\n  handleButtonClick = () => {\n    this.props.addToDo(this.state.todoInput);\n    this.setState({\n      todoInput: \"\"\n    });\n  };\n\n  handleDeleteButtonClick = (idx: number) => {\n    console.log(\"deleting\", idx);\n    this.props.deleteToDo(idx);\n  };\n\n  render() {\n    let todoJSX: JSX.Element[] | JSX.Element;\n    if (!this.props.todoList.length) {\n      todoJSX = <p>No to do</p>;\n    } else {\n      todoJSX = this.props.todoList.map((item, idx) => {\n        return (\n          <TodoItem\n            item={item}\n            key={idx}\n            idx={idx}\n            handleDelete={this.handleDeleteButtonClick}\n          />\n        );\n      });\n    }\n\n    return (\n      <div>\n        {todoJSX}\n        <input\n          onChange={this.handleTextChange}\n          placeholder={\"New To Do Here\"}\n          value={this.state.todoInput}\n        />\n        <button onClick={this.handleButtonClick}>Add To Do</button>\n      </div>\n    );\n  }\n}\n\nconst MapStateToProps = (store: MyTypes.ReducerState) => {\n  return {\n    count: store.todo.count,\n    todoList: store.todo.list\n  };\n};\n\nconst MapDispatchToProps = (dispatch: Dispatch<MyTypes.RootAction>) => ({\n  addToDo: (item: string) => dispatch({ type: actionTypes.ADD, payload: item }),\n  deleteToDo: (idx: number) =>\n    dispatch({ type: actionTypes.DELETE, payload: idx })\n});\n\nexport default connect(MapStateToProps, MapDispatchToProps)(TodoContainer);\n","import * as MyTypes from \"MyTypes\";\nimport { actionTypes } from \"../actions\";\n\ninterface ITodoModel {\n  count: number;\n  list: string[];\n}\n\nexport const initialState: ITodoModel = {\n  count: 2,\n  list: [\"Do the laundry\", \"Do the dishes\"]\n};\n\nexport const todoReducer = (state: ITodoModel = initialState, action: MyTypes.RootAction) => {\n  switch (action.type) {\n    case actionTypes.ADD: {\n      return {\n        ...state,\n        count: state.count + 1,\n        list: [...state.list, action.payload]\n      };\n    }\n    case actionTypes.DELETE: {\n      const oldList = [...state.list];\n      oldList.splice(action.payload, 1);\n      const newList = oldList;\n\n      return {\n        ...state,\n        count: state.count - 1,\n        list: newList\n      };\n    }\n    default:\n      return state;\n  }\n};","import { combineReducers } from \"redux\";\nimport { todoReducer } from \"./todoReducers\";\n\nconst rootReducer = combineReducers({\n  todo: todoReducer\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"../reducers\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { App } from \"./App\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import * as React from \"react\";\nimport TodoContainer from \"./containers/TodoContainer\";\n\nexport const App: React.FC<{}> = () => {\n  return (\n    <>\n      <h1>React Redux Typescript</h1>\n      <TodoContainer />\n    </>\n  );\n};\n"],"sourceRoot":""}